name: 'Build and Deploy'

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - '.gitignore'
      - 'README.md'
      - '.github/workflows/**'

permissions:
  contents: read

jobs:
  build:
    name: 'Build Environment'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./backend/terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan
      env:
        TF_INPUT: false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
      env:
        TF_INPUT: false
      
  # deploy_azure_static_web_app:
  #   if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
  #   runs-on: ubuntu-latest
  #   name: 'Deploy Web App'
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: true
  #     - name: Build And Deploy App
  #       id: deployapp
  #       uses: Azure/static-web-apps-deploy@v1
  #       with:
  #         azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
  #         repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
  #         action: "upload"
  #         ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
  #         # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
  #         app_location: "/frontend" # App source code path
  #         #api_location: "/backend/api" # Api source code path - optional
  #         #output_location: "" # Built app content directory - optional
  #         ###### End of Repository/Build Configurations ######
  #   needs: build

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: "close"
    needs: deploy_web_app